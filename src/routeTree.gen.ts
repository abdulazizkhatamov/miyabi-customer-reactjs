/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as CartIndexRouteImport } from './routes/cart/index'
import { Route as ProductSlugIndexRouteImport } from './routes/product/$slug/index'

const IndexLazyRouteImport = createFileRoute('/')()
const ContactsIndexLazyRouteImport = createFileRoute('/contacts/')()
const BranchesIndexLazyRouteImport = createFileRoute('/branches/')()
const AboutIndexLazyRouteImport = createFileRoute('/about/')()

const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const ContactsIndexLazyRoute = ContactsIndexLazyRouteImport.update({
  id: '/contacts/',
  path: '/contacts/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/contacts/index.lazy').then((d) => d.Route),
)
const BranchesIndexLazyRoute = BranchesIndexLazyRouteImport.update({
  id: '/branches/',
  path: '/branches/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/branches/index.lazy').then((d) => d.Route),
)
const AboutIndexLazyRoute = AboutIndexLazyRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about/index.lazy').then((d) => d.Route))
const CartIndexRoute = CartIndexRouteImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductSlugIndexRoute = ProductSlugIndexRouteImport.update({
  id: '/product/$slug/',
  path: '/product/$slug/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/cart': typeof CartIndexRoute
  '/about': typeof AboutIndexLazyRoute
  '/branches': typeof BranchesIndexLazyRoute
  '/contacts': typeof ContactsIndexLazyRoute
  '/product/$slug': typeof ProductSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/cart': typeof CartIndexRoute
  '/about': typeof AboutIndexLazyRoute
  '/branches': typeof BranchesIndexLazyRoute
  '/contacts': typeof ContactsIndexLazyRoute
  '/product/$slug': typeof ProductSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/cart/': typeof CartIndexRoute
  '/about/': typeof AboutIndexLazyRoute
  '/branches/': typeof BranchesIndexLazyRoute
  '/contacts/': typeof ContactsIndexLazyRoute
  '/product/$slug/': typeof ProductSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/about'
    | '/branches'
    | '/contacts'
    | '/product/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cart' | '/about' | '/branches' | '/contacts' | '/product/$slug'
  id:
    | '__root__'
    | '/'
    | '/cart/'
    | '/about/'
    | '/branches/'
    | '/contacts/'
    | '/product/$slug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CartIndexRoute: typeof CartIndexRoute
  AboutIndexLazyRoute: typeof AboutIndexLazyRoute
  BranchesIndexLazyRoute: typeof BranchesIndexLazyRoute
  ContactsIndexLazyRoute: typeof ContactsIndexLazyRoute
  ProductSlugIndexRoute: typeof ProductSlugIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contacts/': {
      id: '/contacts/'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/branches/': {
      id: '/branches/'
      path: '/branches'
      fullPath: '/branches'
      preLoaderRoute: typeof BranchesIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart/': {
      id: '/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$slug/': {
      id: '/product/$slug/'
      path: '/product/$slug'
      fullPath: '/product/$slug'
      preLoaderRoute: typeof ProductSlugIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CartIndexRoute: CartIndexRoute,
  AboutIndexLazyRoute: AboutIndexLazyRoute,
  BranchesIndexLazyRoute: BranchesIndexLazyRoute,
  ContactsIndexLazyRoute: ContactsIndexLazyRoute,
  ProductSlugIndexRoute: ProductSlugIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
